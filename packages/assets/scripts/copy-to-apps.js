const { promises: fs } = require('fs');
const path = require('path');

async function copyToApps() {
  const sourceFaviconsDir = path.join(__dirname, '../favicons');
  const sourceIconsDir = path.join(__dirname, '../icons/webapp');
  const apps = ['web', 'docs'];
  
  try {
    console.log('Copying assets to apps...');
    
    // Read favicon manifest
    const manifestPath = path.join(sourceFaviconsDir, 'manifest.json');
    const manifest = JSON.parse(await fs.readFile(manifestPath, 'utf8'));
    
    // Find the favicon.ico file
    const faviconFile = manifest.faviconFiles.find(name => name === 'favicon.ico');
    if (!faviconFile) {
      throw new Error('favicon.ico not found in generated favicons');
    }
    
    // Copy favicon files and webapp icons to each app
    for (const app of apps) {
      // Set up public directories
      const appPublicDir = path.join(__dirname, `../../../apps/${app}/public`);
      const appIconsDir = path.join(appPublicDir, 'icons');
      
      // Ensure the public directories exist
      await fs.mkdir(appPublicDir, { recursive: true });
      await fs.mkdir(appIconsDir, { recursive: true });
      
      // 1. Copy favicon.ico
      const faviconSource = path.join(sourceFaviconsDir, faviconFile);
      const faviconTarget = path.join(appPublicDir, 'favicon.ico');
      await fs.copyFile(faviconSource, faviconTarget);
      console.log(`Copied favicon.ico to ${app} app`);
      
      // 2. Copy web manifest file
      const webManifestSource = path.join(sourceFaviconsDir, 'manifest.webmanifest');
      if (await fileExists(webManifestSource)) {
        const webManifestTarget = path.join(appPublicDir, 'manifest.webmanifest');
        await fs.copyFile(webManifestSource, webManifestTarget);
        console.log(`Copied manifest.webmanifest to ${app} app`);
      }
      
      // 3. Copy all needed favicon images
      for (const imageName of manifest.faviconFiles) {
        // Skip favicon.ico as we've already copied it
        if (imageName === 'favicon.ico') continue;
        
        // Destination will be in the icons folder
        const sourceFile = path.join(sourceFaviconsDir, imageName);
        const targetFile = path.join(appIconsDir, imageName);
        
        await fs.copyFile(sourceFile, targetFile);
        console.log(`Copied ${imageName} to ${app} app`);
      }
      
      // 4. Copy PWA manifest files
      for (const fileName of manifest.metaFiles) {
        const sourceFile = path.join(sourceFaviconsDir, fileName);
        const targetFile = path.join(appPublicDir, fileName);
        
        await fs.copyFile(sourceFile, targetFile);
        console.log(`Copied ${fileName} to ${app} app`);
      }
      
      // 5. Copy webapp icons
      const webappIcons = await fs.readdir(sourceIconsDir);
      for (const icon of webappIcons) {
        if (icon.endsWith('.png')) {
          const sourceFile = path.join(sourceIconsDir, icon);
          const targetFile = path.join(appIconsDir, icon);
          
          await fs.copyFile(sourceFile, targetFile);
          console.log(`Copied ${icon} to ${app}/icons/`);
        }
      }
      
      // 6. Create a favicon HTML snippet
      const faviconSnippet = `<!-- Favicons generated by @repo/assets -->
<!-- Primary Meta Tags -->
<link rel="icon" href="/favicon.ico" sizes="any">
${manifest.htmlCode.join('\n')}`;
      
      const snippetFile = path.join(appPublicDir, 'favicon-snippet.html');
      await fs.writeFile(snippetFile, faviconSnippet);
      console.log(`Created favicon-snippet.html for ${app} app`);
    }
    
    console.log('Copy to apps complete!');
  } catch (error) {
    console.error('Error copying to apps:', error);
    process.exit(1);
  }
}

// Helper function to check if a file exists
async function fileExists(filePath) {
  try {
    await fs.access(filePath);
    return true;
  } catch {
    return false;
  }
}

// Execute the function
copyToApps();